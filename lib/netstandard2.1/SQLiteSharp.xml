<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SQLiteSharp</name>
    </assembly>
    <members>
        <member name="T:SQLiteSharp.AliasAttribute">
            <summary>
            The table/column will be mapped with the given name.
            </summary>
        </member>
        <member name="M:SQLiteSharp.AliasAttribute.#ctor(System.String)">
            <summary>
            The table/column will be mapped with the given name.
            </summary>
        </member>
        <member name="P:SQLiteSharp.AliasAttribute.Name">
            <summary>
            The table/column name to store in the database.
            </summary>
        </member>
        <member name="T:SQLiteSharp.WithoutRowIdAttribute">
            <summary>
            The table will be created without an implicit <c>rowid</c> (see <see href="https://sqlite.org/withoutrowid.html"/>).
            </summary>
        </member>
        <member name="M:SQLiteSharp.WithoutRowIdAttribute.#ctor">
            <summary>
            The table will be created without an implicit <c>rowid</c> (see <see href="https://sqlite.org/withoutrowid.html"/>).
            </summary>
        </member>
        <member name="T:SQLiteSharp.IgnoreAttribute">
            <summary>
            The member will not be treated as a column in the table.
            </summary>
        </member>
        <member name="M:SQLiteSharp.IgnoreAttribute.#ctor">
            <summary>
            The member will not be treated as a column in the table.
            </summary>
        </member>
        <member name="T:SQLiteSharp.PrimaryKeyAttribute">
            <summary>
            The column will be designated as the primary key (ID) for the table.
            </summary>
        </member>
        <member name="M:SQLiteSharp.PrimaryKeyAttribute.#ctor">
            <summary>
            The column will be designated as the primary key (ID) for the table.
            </summary>
        </member>
        <member name="T:SQLiteSharp.ForeignKeyAttribute">
            <summary>
            The column will be designated as a foreign key (ID) for another table.
            </summary>
        </member>
        <member name="M:SQLiteSharp.ForeignKeyAttribute.#ctor(System.String,System.String)">
            <summary>
            The column will be designated as a foreign key (ID) for another table.
            </summary>
        </member>
        <member name="P:SQLiteSharp.ForeignKeyAttribute.ForeignTable">
            <summary>
            The name of the foreign table.
            </summary>
        </member>
        <member name="P:SQLiteSharp.ForeignKeyAttribute.ForeignColumn">
            <summary>
            The name of the column in the foreign table.
            </summary>
        </member>
        <member name="P:SQLiteSharp.ForeignKeyAttribute.OnDelete">
            <summary>
            The action to complete when the row referenced by the foreign key is deleted.
            </summary>
        </member>
        <member name="P:SQLiteSharp.ForeignKeyAttribute.OnUpdate">
            <summary>
            The action to complete when the foreign key is changed.
            </summary>
        </member>
        <member name="T:SQLiteSharp.IndexAttribute">
            <summary>
            An <see href="https://www.sqlite.org/lang_createindex.html">index</see> will be created for the column.
            </summary>
        </member>
        <member name="M:SQLiteSharp.IndexAttribute.#ctor(System.String)">
            <summary>
            An <see href="https://www.sqlite.org/lang_createindex.html">index</see> will be created for the column.
            </summary>
        </member>
        <member name="P:SQLiteSharp.IndexAttribute.Name">
            <summary>
            The name of the index to create.
            </summary>
            <remarks>
            An index can be created over multiple columns by setting this to the same value.
            </remarks>
        </member>
        <member name="P:SQLiteSharp.IndexAttribute.Unique">
            <summary>
            If <see langword="true"/>, every row must have a unique value for this index.<br/>
            Default: <see langword="true"/>
            </summary>
        </member>
        <member name="T:SQLiteSharp.AutoIncrementAttribute">
            <summary>
            The column will be automatically incremented from the last value when inserting in the table.
            </summary>
        </member>
        <member name="M:SQLiteSharp.AutoIncrementAttribute.#ctor">
            <summary>
            The column will be automatically incremented from the last value when inserting in the table.
            </summary>
        </member>
        <member name="T:SQLiteSharp.UniqueAttribute">
            <summary>
            A unique constraint will be created for this column.
            </summary>
            <remarks>
            An index is internally created for this column by SQLite.
            </remarks>
        </member>
        <member name="M:SQLiteSharp.UniqueAttribute.#ctor">
            <summary>
            A unique constraint will be created for this column.
            </summary>
            <remarks>
            An index is internally created for this column by SQLite.
            </remarks>
        </member>
        <member name="T:SQLiteSharp.NotNullAttribute">
            <summary>
            The value is not allowed to be null.
            </summary>
        </member>
        <member name="M:SQLiteSharp.NotNullAttribute.#ctor">
            <summary>
            The value is not allowed to be null.
            </summary>
        </member>
        <member name="T:SQLiteSharp.CollationAttribute">
            <summary>
            The method of string comparison to use with the value (see <see cref="T:SQLiteSharp.Collation"/>).
            </summary>
        </member>
        <member name="M:SQLiteSharp.CollationAttribute.#ctor(System.String)">
            <summary>
            The method of string comparison to use with the value (see <see cref="T:SQLiteSharp.Collation"/>).
            </summary>
        </member>
        <member name="P:SQLiteSharp.CollationAttribute.Value">
            <summary>
            The name of the collation.
            </summary>
        </member>
        <member name="T:SQLiteSharp.CheckAttribute">
            <summary>
            A SQL expression which must pass for the column to be valid.
            </summary>
        </member>
        <member name="M:SQLiteSharp.CheckAttribute.#ctor(System.String)">
            <summary>
            A SQL expression which must pass for the column to be valid.
            </summary>
        </member>
        <member name="P:SQLiteSharp.CheckAttribute.Value">
            <summary>
            The SQL expression to execute.
            </summary>
        </member>
        <member name="T:SQLiteSharp.Collation">
            <summary>
            Contains names for string comparison collations built into <see cref="N:SQLiteSharp"/>.
            </summary>
        </member>
        <member name="F:SQLiteSharp.Collation.Binary">
            <summary>
            Compares the strings for an exact match (case-sensitive).
            </summary>
            <remarks>
            This is equivalent to <see cref="F:System.StringComparison.Ordinal"/>.
            </remarks>
        </member>
        <member name="F:SQLiteSharp.Collation.NoCase">
            <summary>
            Compares the strings with case-insensitive ASCII characters.
            </summary>
            <remarks>
            This is equivalent to <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.
            </remarks>
        </member>
        <member name="F:SQLiteSharp.Collation.RTrim">
            <summary>
            Compares the strings for an exact match, ignoring trailing whitespace.
            </summary>
        </member>
        <member name="F:SQLiteSharp.Collation.Invariant">
            <summary>
            Compares the strings with case-sensitive unicode characters.
            </summary>
            <remarks>
            This is a custom collation created by default and corresponds to <see cref="F:System.StringComparison.InvariantCulture"/>.
            </remarks>
        </member>
        <member name="F:SQLiteSharp.Collation.InvariantNoCase">
            <summary>
            Compares the strings with case-insensitive unicode characters.
            </summary>
            <remarks>
            This is a custom collation created by default and corresponds to <see cref="F:System.StringComparison.InvariantCultureIgnoreCase"/>.
            </remarks>
        </member>
        <member name="T:SQLiteSharp.ColumnInfo">
            <summary>
            Information about a single column, as returned by <see href="https://www.sqlite.org/pragma.html#pragma_table_info"><c>pragma table_info</c></see>.
            </summary>
        </member>
        <member name="P:SQLiteSharp.ColumnInfo.ColumnIndex">
            <summary>
            The index of the column.
            </summary>
        </member>
        <member name="P:SQLiteSharp.ColumnInfo.Name">
            <summary>
            The name of the column.
            </summary>
        </member>
        <member name="P:SQLiteSharp.ColumnInfo.Type">
            <summary>
            The exact <see href="https://sqlite.org/datatype3.html">type name</see> of the column, e.g. <c>varchar(20)</c> or <c>INTEGER</c>.
            </summary>
        </member>
        <member name="P:SQLiteSharp.ColumnInfo.NotNull">
            <summary>
            Whether the column is allowed to be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:SQLiteSharp.ColumnInfo.DefaultValue">
            <summary>
            The default value for the column when inserting rows.
            </summary>
        </member>
        <member name="P:SQLiteSharp.ColumnInfo.PrimaryKey">
            <summary>
            Whether the column is the primary key of the table.
            </summary>
        </member>
        <member name="T:SQLiteSharp.ForeignKeyAction">
            <summary>
            On delete/update actions for <see href="https://www.sqlite.org/foreignkeys.html#fk_actions">Foreign Keys</see>.
            </summary>
        </member>
        <member name="F:SQLiteSharp.ForeignKeyAction.NoAction">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="F:SQLiteSharp.ForeignKeyAction.Restrict">
            <summary>
            The referenced key is prevented from being changed while it is still referenced.
            </summary>
        </member>
        <member name="F:SQLiteSharp.ForeignKeyAction.SetNull">
            <summary>
            The references are set to null if the referenced key is changed.
            </summary>
        </member>
        <member name="F:SQLiteSharp.ForeignKeyAction.SetDefault">
            <summary>
            The references are set to their default value if the referenced key is changed.
            </summary>
        </member>
        <member name="F:SQLiteSharp.ForeignKeyAction.Cascade">
            <summary>
            The references are also deleted/updated if the referenced key is changed.
            </summary>
        </member>
        <member name="T:SQLiteSharp.Globals">
            <summary>
            Extension methods used in <see cref="N:SQLiteSharp"/>.
            </summary>
        </member>
        <member name="M:SQLiteSharp.Globals.SqlQuote(System.String,System.String)">
            <summary>
            Converts <paramref name="unsafeString"/> to a quoted SQL string that can be safely used in queries.<br/>
            For example, (<c>red "blue" green</c>) becomes (<c>"red ""blue"" green"</c>).<br/>
            If <paramref name="unsafeString"/> is <see langword="null"/>, returns "<c>null</c>".
            </summary>
            <remarks>
            The default double-quotes (<c>"</c>) are only suitable for identifiers. String literals should use single-quotes (<c>'</c>).
            </remarks>
        </member>
        <member name="M:SQLiteSharp.Globals.GetValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the value of the member if it's a property or field.
            </summary>
        </member>
        <member name="M:SQLiteSharp.Globals.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the value of the member if it's a property or field.
            </summary>
        </member>
        <member name="M:SQLiteSharp.Globals.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Gets the constant value of the expression or compiles it to a delegate and invokes it.
            </summary>
        </member>
        <member name="M:SQLiteSharp.Globals.ToEnumString(System.Enum)">
            <summary>
            Converts the enum to a string using <see cref="T:System.Runtime.Serialization.EnumMemberAttribute"/> if present.
            </summary>
        </member>
        <member name="T:SQLiteSharp.Orm">
            <summary>
            An Object-Relational Mapper used to map CLR members to SQLite columns.
            </summary>
        </member>
        <member name="P:SQLiteSharp.Orm.TypeSerializers">
            <summary>
            The types recognised by the ORM.
            </summary>
            <remarks>
            The types should be non-nullable, since type serializers are not used for <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:SQLiteSharp.Orm.IsImplicitPrimaryKey">
            <summary>
            A predicate deciding whether the member should be made the primary key even if it lacks a <see cref="T:SQLiteSharp.PrimaryKeyAttribute"/>.<br/>
            By default, returns <see langword="true"/> if the member's name is "Id".
            </summary>
            <remarks>
            This predicate is ignored if the member has a <see cref="T:SQLiteSharp.PrimaryKeyAttribute"/>.
            </remarks>
        </member>
        <member name="P:SQLiteSharp.Orm.IsImplicitIndex">
            <summary>
            A predicate deciding whether an index should be made for the member even if it lacks a <see cref="T:SQLiteSharp.IndexAttribute"/>.<br/>
            By default, returns <see langword="true"/> if the member's name ends with "Id".
            </summary>
            <remarks>
            This predicate is ignored if the member has an <see cref="T:SQLiteSharp.IndexAttribute"/>.
            </remarks>
        </member>
        <member name="P:SQLiteSharp.Orm.IsImplicitAutoIncrement">
            <summary>
            A predicate deciding whether the member should be auto-incremented even if it lacks a <see cref="T:SQLiteSharp.AutoIncrementAttribute"/>.<br/>
            By default, always returns <see langword="false"/>.
            </summary>
            <remarks>
            This predicate is ignored if the member has an <see cref="T:SQLiteSharp.AutoIncrementAttribute"/>.
            </remarks>
        </member>
        <member name="P:SQLiteSharp.Orm.Default">
            <summary>
            A global instance of <see cref="T:SQLiteSharp.Orm"/> used as the default for <see cref="P:SQLiteSharp.SqliteConnectionOptions.Orm"/>.
            </summary>
        </member>
        <member name="P:SQLiteSharp.Orm.DefaultJsonOptions">
            <summary>
            A global instance of <see cref="T:System.Text.Json.JsonSerializerOptions"/> used as the default for JSON serialization/deserialization.
            </summary>
        </member>
        <member name="M:SQLiteSharp.Orm.#ctor">
            <summary>
            Constructs a new <see cref="T:SQLiteSharp.Orm"/> with the default type serializers.
            </summary>
        </member>
        <member name="M:SQLiteSharp.Orm.RegisterType(System.Type,SQLiteSharp.SqliteType,System.Func{System.Object,SQLiteSharp.SqliteValue},System.Func{SQLiteSharp.SqliteValue,System.Type,System.Object})">
            <summary>
            Creates a type serializer for the given type.
            </summary>
        </member>
        <member name="M:SQLiteSharp.Orm.RegisterType``1(SQLiteSharp.SqliteType,System.Func{``0,SQLiteSharp.SqliteValue},System.Func{SQLiteSharp.SqliteValue,System.Type,``0})">
            <inheritdoc cref="M:SQLiteSharp.Orm.RegisterType(System.Type,SQLiteSharp.SqliteType,System.Func{System.Object,SQLiteSharp.SqliteValue},System.Func{SQLiteSharp.SqliteValue,System.Type,System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.Orm.GetTypeSerializer(System.Type)">
            <summary>
            Gets a type serializer for the given (non-nullable) type.<br/>
            If not found for the exact type, the type's interfaces are searched.<br/>
            If not found for an interface, the type's base types are searched.
            </summary>
        </member>
        <member name="M:SQLiteSharp.Orm.Serialize(System.Object)">
            <summary>
            Gets a type serializer for the given object's type and serializes the object as a <see cref="T:SQLiteSharp.SqliteValue"/>.
            </summary>
        </member>
        <member name="M:SQLiteSharp.Orm.Deserialize(SQLiteSharp.SqliteValue,System.Type)">
            <summary>
            Gets a type serializer for the given type and deserializes the object from a <see cref="T:SQLiteSharp.SqliteValue"/>.
            </summary>
        </member>
        <member name="M:SQLiteSharp.Orm.GetSqlDeclaration(SQLiteSharp.SqliteColumn)">
            <summary>
            Gets a SQL declaration string for the column (e.g. <c>name text unique not null</c>).
            </summary>
        </member>
        <member name="T:SQLiteSharp.TypeSerializer">
            <summary>
            Contains functions to convert between <see cref="T:System.Object"/> and <see cref="T:SQLiteSharp.SqliteValue"/> for a specific type.
            </summary>
        </member>
        <member name="M:SQLiteSharp.TypeSerializer.#ctor(System.Type,SQLiteSharp.SqliteType,System.Func{System.Object,SQLiteSharp.SqliteValue},System.Func{SQLiteSharp.SqliteValue,System.Type,System.Object})">
            <summary>
            Contains functions to convert between <see cref="T:System.Object"/> and <see cref="T:SQLiteSharp.SqliteValue"/> for a specific type.
            </summary>
        </member>
        <member name="P:SQLiteSharp.TypeSerializer.ClrType">
            <summary>
            The CLR (.NET) type used in the program.
            </summary>
        </member>
        <member name="P:SQLiteSharp.TypeSerializer.SqliteType">
            <summary>
            The SQLite type used in the database.
            </summary>
        </member>
        <member name="P:SQLiteSharp.TypeSerializer.Serialize">
            <summary>
            Serializes the object from <see cref="P:SQLiteSharp.TypeSerializer.ClrType"/> to <see cref="P:SQLiteSharp.TypeSerializer.SqliteType"/>.
            </summary>
        </member>
        <member name="P:SQLiteSharp.TypeSerializer.Deserialize">
            <summary>
            Serializes the object from <see cref="P:SQLiteSharp.TypeSerializer.SqliteType"/> to the desired type (which should be compatible with <see cref="P:SQLiteSharp.TypeSerializer.ClrType"/>).
            </summary>
        </member>
        <member name="T:SQLiteSharp.SqlBuilder`1">
            <summary>
            A SQLite command builder for a table using the fluent style.<br/>
            </summary>
            <remarks>
            Do not reuse.
            </remarks>
        </member>
        <member name="P:SQLiteSharp.SqlBuilder`1.Table">
            <summary>
            The table the builder is building a command for.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqlBuilder`1.Parameters">
            <summary>
            The current parameters to be used with the command.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqlBuilder`1.MethodToSqlConverters">
            <summary>
            Functions to convert CLR methods to SQL expressions.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqlBuilder`1.MemberToSqlConverters">
            <summary>
            Functions to convert CLR properties/fields to SQL expressions.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.#ctor(SQLiteSharp.SqliteTable{`0})">
            <summary>
            Constructs a <see cref="T:SQLiteSharp.SqlBuilder`1"/> to build and execute a complex SQL query using the fluent style.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Select">
            <summary>
            Adds a <c>select</c> statement for every column.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Select(SQLiteSharp.SelectType)">
            <summary>
            Adds a <c>select(...)</c> statement for every column.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Select(System.String)">
            <summary>
            Adds a <c>select</c> statement for a specific column.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Select(System.String,SQLiteSharp.SelectType)">
            <summary>
            Adds a <c>select(...)</c> statement for a specific column.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.OrderBy(System.String)">
            <summary>
            Adds an <c>order by asc</c> statement for a specific column.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.OrderByDescending(System.String)">
            <summary>
            Adds an <c>order by desc</c> statement for a specific column.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.GroupBy(System.String)">
            <summary>
            Adds a <c>group by</c> statement for a specific column.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Where(System.String)">
            <summary>
            Adds a <c>where</c> statement.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Having(System.String)">
            <summary>
            Adds a <c>having</c> statement.
            </summary>
            <remarks>
            This is similar to <see cref="M:SQLiteSharp.SqlBuilder`1.Where(System.String)"/> but applies after <see cref="M:SQLiteSharp.SqlBuilder`1.GroupBy(System.String)"/>.
            </remarks>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Take(System.Int64)">
            <summary>
            Adds a <c>limit</c> statement.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Skip(System.Int64)">
            <summary>
            Adds an <c>offset</c> statement.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Update(System.String,System.String)">
            <summary>
            Adds an <c>update</c> statement for a specific column.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Insert(System.String,System.String)">
            <summary>
            Adds an <c>insert</c> statement for a specific column.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Delete">
            <summary>
            Adds a <c>delete</c> statement.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.GetCommand">
            <summary>
            Builds a SQL command from the state of the builder, to be used with <see cref="P:SQLiteSharp.SqlBuilder`1.Parameters"/>.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Execute">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.Execute(System.String,System.Collections.Generic.IEnumerable{System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.ExecuteAsync">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.ExecuteAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.ExecuteScalars``1">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.ExecuteScalars``1(System.String,System.Collections.Generic.IEnumerable{System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.ExecuteScalarsAsync``1">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.ExecuteScalarsAsync``1(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.ExecuteQuery">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.ExecuteQuery(System.String,System.Collections.Generic.IEnumerable{System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.ExecuteQueryAsync">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.ExecuteQueryAsync(System.String,System.Collections.Generic.IEnumerable{System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <inheritdoc cref="M:SQLiteSharp.SqlBuilder`1.Select(System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SQLiteSharp.SelectType)">
            <inheritdoc cref="M:SQLiteSharp.SqlBuilder`1.Select(System.String,SQLiteSharp.SelectType)"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <inheritdoc cref="M:SQLiteSharp.SqlBuilder`1.OrderBy(System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <inheritdoc cref="M:SQLiteSharp.SqlBuilder`1.OrderByDescending(System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.GroupBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <inheritdoc cref="M:SQLiteSharp.SqlBuilder`1.GroupBy(System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc cref="M:SQLiteSharp.SqlBuilder`1.Where(System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc cref="M:SQLiteSharp.SqlBuilder`1.Having(System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <inheritdoc cref="M:SQLiteSharp.SqlBuilder`1.Update(System.String,System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <inheritdoc cref="M:SQLiteSharp.SqlBuilder`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.Insert(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <inheritdoc cref="M:SQLiteSharp.SqlBuilder`1.Insert(System.String,System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.OperatorToSql(System.Linq.Expressions.ExpressionType)">
            <summary>
            Converts the CLR operator to a SQL operator.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.StringComparisonToCollation(System.StringComparison)">
            <summary>
            Converts the string comparison type to a SQLite collation name.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.GenerateParameterName">
            <summary>
            Increments the parameter counter and returns the formatted SQL parameter name (including the <c>@</c>).
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.AddParameter(System.Object)">
            <summary>
            Adds a parameter with the given value, returning the generated formatted SQL parameter name (including the <c>@</c>).
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.MemberExpressionToColumnName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Converts a member (property/field) expression to the name of a column in the table.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.ExpressionToSql(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Recursively converts the CLR expression to a SQL expression, adding parameters where necessary.
            </summary>
            <param name="rowExpression">
            The row parameter (e.g. the <c>player</c> in <c>(player => player.name)</c>).
            </param>
        </member>
        <member name="M:SQLiteSharp.SqlBuilder`1.TryConvertEqualsNullToIsNull(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.ParameterExpression,System.String@)">
            <summary>
            Converts (a == null) to "a is null" because "null = null" is false.
            </summary>
        </member>
        <member name="T:SQLiteSharp.SelectType">
            <summary>
            SQL aggregate functions (e.g. <c>SELECT COUNT(*)</c>)<br/>
            See <see href="https://www.sqlite.org/lang_aggfunc.html">Built-in Aggregate Functions</see>.
            </summary>
        </member>
        <member name="F:SQLiteSharp.SelectType.Average">
            <summary>
            The mean (average) of the values.
            </summary>
        </member>
        <member name="F:SQLiteSharp.SelectType.Count">
            <summary>
            The number of non-null values.
            </summary>
        </member>
        <member name="F:SQLiteSharp.SelectType.GroupConcat">
            <summary>
            The string concatenation of the non-null values.
            </summary>
        </member>
        <member name="F:SQLiteSharp.SelectType.Min">
            <summary>
            The minimum non-null value.
            </summary>
        </member>
        <member name="F:SQLiteSharp.SelectType.Max">
            <summary>
            The maximum non-null value.
            </summary>
        </member>
        <member name="F:SQLiteSharp.SelectType.Sum">
            <summary>
            The sum (addition) of all the non-null values.
            </summary>
        </member>
        <member name="F:SQLiteSharp.SelectType.Total">
            <summary>
            Similar to <see cref="F:SQLiteSharp.SelectType.Sum"/> but always returns a floating-point value (even if there are only integers or null).
            </summary>
        </member>
        <member name="T:SQLiteSharp.SqliteColumn">
            <summary>
            A single column in a <see cref="T:SQLiteSharp.SqliteTable`1"/> mapped to a CLR member.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteColumn.Connection">
            <summary>
            The database connection connected to the column.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteColumn.Name">
            <summary>
            The name of the column.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteColumn.ClrMember">
            <summary>
            The mapped CLR member (property/field).
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteColumn.ClrType">
            <summary>
            The CLR type of the mapped CLR member (property/field).
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteColumn.Collation">
            <summary>
            The collation name to use with the column.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteColumn.Check">
            <summary>
            The check expression constraint for the column.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteColumn.IsPrimaryKey">
            <summary>
            Whether the column is the primary key of the table.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteColumn.ForeignKey">
            <summary>
            The foreign key reference for the column.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteColumn.IsAutoIncremented">
            <summary>
            Whether the column is automatically incremented on insert.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteColumn.IsNotNull">
            <summary>
            Whether the column value is required to be non-null.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteColumn.IsUnique">
            <summary>
            Whether the column is required to have a unique value for each row.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteColumn.Indexes">
            <summary>
            The indexes to create in the table.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteColumn.SetValue(System.Object,System.Object)">
            <summary>
            Sets the row's member mapped to this column.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteColumn.SetSqliteValue(System.Object,SQLiteSharp.SqliteValue)">
            <inheritdoc cref="M:SQLiteSharp.SqliteColumn.SetValue(System.Object,System.Object)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteColumn.GetValue(System.Object)">
            <summary>
            Gets the row's member mapped to this column.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteColumn.GetSqliteValue(System.Object)">
            <inheritdoc cref="M:SQLiteSharp.SqliteColumn.GetValue(System.Object)"/>
        </member>
        <member name="T:SQLiteSharp.SqliteCommand">
            <summary>
            A command to be executed in the database containing raw SQL and parameters.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteCommand.#ctor(SQLiteSharp.SqliteConnection)">
            <summary>
            A command to be executed in the database containing raw SQL and parameters.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteCommand.Connection">
            <summary>
            The database connection connected to the command.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteCommand.CommandText">
            <summary>
            The raw SQL query.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteCommand.Parameters">
            <summary>
            The parameters included in the command text.
            </summary>
        </member>
        <member name="E:SQLiteSharp.SqliteCommand.OnInstanceCreated">
            <summary>
            Invoked when an object is created to map a row of a table.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteCommand.ToString">
            <summary>
            Describes the command and its parameters.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteCommand.Execute">
            <summary>
            Runs the command in the database.
            </summary>
            <returns>
            The number of rows added/modified.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteCommand.ExecuteScalars``1">
            <summary>
            Runs the command in the database.
            </summary>
            <returns>
            A primitive value for the first column of each row returned by the command.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteCommand.ExecuteQuery``1(SQLiteSharp.SqliteTable{``0})">
            <summary>
            Runs the command in the database.
            </summary>
            <returns>
            An object for each row returned by the command.
            </returns>
        </member>
        <member name="T:SQLiteSharp.SqliteCommandParameter">
            <summary>
            A parameter for a <see cref="T:SQLiteSharp.SqliteCommand"/> with an optional name.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteCommandParameter.#ctor(System.String,System.Object)">
            <summary>
            A parameter for a <see cref="T:SQLiteSharp.SqliteCommand"/> with an optional name.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteCommandParameter.Name">
            <summary>
            The optional name for the parameter.
            </summary>
            <remarks>
            If not provided, the parameter's index is used instead.
            </remarks>
        </member>
        <member name="P:SQLiteSharp.SqliteCommandParameter.Value">
            <summary>
            The CLR value of the parameter.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteCommandParameter.ToString">
            <summary>
            Describes the command parameter.
            </summary>
        </member>
        <member name="T:SQLiteSharp.SqliteConnection">
            <summary>
            An open connection to a SQLite database.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteConnection.Orm">
            <summary>
            The Object-Relational Mapper to use with the connection.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteConnection.Handle">
            <summary>
            The native SQLite database handle from <see cref="N:SQLitePCL"/>.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteConnection.Options">
            <summary>
            The options used to open this connection.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.#cctor">
            <summary>
            Initializes the raw SQLite Portable Class Library.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.#ctor(SQLiteSharp.SqliteConnectionOptions)">
            <summary>
            Creates a new connection to the given SQLite database.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.#ctor(System.String)">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.#ctor(SQLiteSharp.SqliteConnectionOptions)"/>
        </member>
        <member name="P:SQLiteSharp.SqliteConnection.SqliteVersionNumber">
            <summary>
            The SQLite library version number. <c>3007014</c> refers to <c>v3.7.14</c>.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.Dispose">
            <summary>
            Closes the connection to the database.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.ChangeKey(System.Byte[],System.String)">
            <summary>
            Changes the 256-bit (32-byte) encryption key used to encrypt/decrypt the database.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.ChangeKeyAsync(System.Byte[])">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.ChangeKey(System.Byte[],System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.SetExtensionLoadingEnabled(System.Boolean)">
            <summary>
            Enables or disables <see href="https://sqlite.org/loadext.html">extension loading</see>.<br/>
            Default: <see langword="false"/>
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.SetExtensionLoadingEnabledAsync(System.Boolean)">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.SetExtensionLoadingEnabled(System.Boolean)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.SetBusyTimeout(System.TimeSpan)">
            <summary>
            Sets the <see href="https://www.sqlite.org/c3ref/busy_timeout.html">busy timeout</see>.<br/>
            Default: 30 seconds
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.CreateCollation(System.String,System.Func{System.String,System.String,System.Int32})">
            <summary>
            Creates a collation for string comparison.
            </summary>
            <remarks>
            Redefining an existing collation will break existing indexes using that collation.
            </remarks>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.GetTable``1(System.String,System.String)">
            <summary>
            Gets or creates a table for the given type.<br/>
            Indexes are also created for columns with <see cref="T:SQLiteSharp.IndexAttribute"/>.<br/>
            You can create a virtual table using <paramref name="virtualModule"/>.
            For example, passing "fts5" creates a virtual table using <see href="https://www.sql-easy.com/learn/sqlite-full-text-search">Full Text Search v5</see>.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.GetTableAsync``1(System.String,System.String)">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.GetTable``1(System.String,System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.GetTablePlaceholder``1(System.String)">
            <summary>
            Gets a table for the given type without actually creating it in the database.<br/>
            This is useful for retrieving rows from <c>pragma</c> tables such as <c>table_info</c>.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.GetTables(System.String)">
            <summary>
            Gets information about each table in the database, as returned from <c>pragma table_list</c>.
            </summary>
            <param name="tableName">
            If not <see langword="null"/>, only returns a result for the table with the given name.
            </param>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.GetTablesAsync(System.String)">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.GetTables(System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.GetColumns(System.String)">
            <summary>
            Gets information about each column in a table, as returned from <c>pragma table_info</c>.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.GetColumnsAsync(System.String)">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.GetColumns(System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.CreateCommand(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a new SqliteCommand given the command text with parameters.<br/>
            Put <c>?</c> in the command text for each argument.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.CreateCommand(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Creates a new SqliteCommand given the command text with named parameters.<br/>
            Put <c>@</c> (or <c>:</c> / <c>$</c>) in the command text followed by an identifier for each argument.<br/>
            For example, <c>@name</c>, <c>:name</c> or <c>$name</c>.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.Execute(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a <see cref="T:SQLiteSharp.SqliteCommand"/> and executes a non query.<br/>
            Use this method when you don't expect rows back.
            </summary>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.ExecuteAsync(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.Execute(System.String,System.Collections.Generic.IEnumerable{System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.Execute(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.Execute(System.String,System.Collections.Generic.IEnumerable{System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.ExecuteAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.Execute(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.ExecuteScalars``1(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a <see cref="T:SQLiteSharp.SqliteCommand"/> and executes a scalar query.<br/>
            Use this method retrieve primitive values.
            </summary>
            <returns>
            The first column of each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.ExecuteScalarsAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.ExecuteScalars``1(System.String,System.Collections.Generic.IEnumerable{System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.ExecuteScalars``1(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.ExecuteScalars``1(System.String,System.Collections.Generic.IEnumerable{System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.ExecuteScalarsAsync``1(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.ExecuteScalars``1(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.CreateSavePoint(System.String)">
            <summary>
            Creates a transaction or savepoint for commands to be rolled back or committed.<br/>
            Call <see cref="M:SQLiteSharp.SqliteConnection.Rollback(System.String)"/> to cancel the transaction or <see cref="M:SQLiteSharp.SqliteConnection.Commit(System.String)"/> to perform the transaction.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.SavePointAsync(System.String)">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.CreateSavePoint(System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.Rollback(System.String)">
            <summary>
            Reverses the transaction to a point created by <see cref="M:SQLiteSharp.SqliteConnection.CreateSavePoint(System.String)"/>.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.RollbackAsync(System.String)">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.Rollback(System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.Commit(System.String)">
            <summary>
            Commits the transaction or savepoint created by <see cref="M:SQLiteSharp.SqliteConnection.CreateSavePoint(System.String)"/>.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.CommitAsync(System.String)">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.Commit(System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.RunInTransaction(System.Action)">
            <summary>
            Creates a savepoint with a random <see cref="T:System.Guid"/> name, executes the action and commits the transaction.<br/>
            The savepoint is rolled back if an exception is thrown.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.RunInTransactionAsync(System.Action)">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.RunInTransaction(System.Action)"/>
            <remarks>
            Since the action is run asynchronously, calls within the action should be synchronous.
            </remarks>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.Backup(System.String,System.String)">
            <summary>
            Saves a backup of the entire database to the specified path.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnection.BackupAsync(System.String,System.String)">
            <inheritdoc cref="M:SQLiteSharp.SqliteConnection.Backup(System.String,System.String)"/>
        </member>
        <member name="T:SQLiteSharp.SqliteConnectionOptions">
            <summary>
            Settings for opening a <see cref="T:SQLiteSharp.SqliteConnection"/>.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteConnectionOptions.#ctor(System.String)">
            <summary>
            Settings for opening a <see cref="T:SQLiteSharp.SqliteConnection"/>.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteConnectionOptions.DatabasePath">
            <summary>
            The file path to the database or ":memory:" for a temporary in-memory database.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteConnectionOptions.OpenFlags">
            <summary>
            The options for opening the native database connection. You should not need to change this from the default.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteConnectionOptions.EncryptionKey">
            <summary>
            The optional 256-bit (32-byte) encryption key to encrypt/decrypt the database.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteConnectionOptions.Orm">
            <summary>
            The Object-Relational Mapper to map CLR members to SQLite columns.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteConnectionOptions.Collations">
            <summary>
            The string comparison collations to create in addition to the built-in collations.<br/><br/>
            By default:
            <list type="bullet">
            <item><c>INVARIANT</c>: Compares the strings with case-sensitive unicode characters.</item>
            <item><c>INVARIANT_NOCASE</c>: Compares the strings with case-insensitive unicode characters.</item>
            </list>
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteConnectionOptions.EnableForeignKeys">
            <summary>
            Whether to enable foreign key constraints.<br/>
            The default is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:SQLiteSharp.SqliteException">
            <summary>
            An error returned from the native SQLite PCL.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteException.#ctor(SQLiteSharp.Result,System.String)">
            <summary>
            An error returned from the native SQLite PCL.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteException.Result">
            <summary>
            The result code for the error.
            </summary>
        </member>
        <member name="T:SQLiteSharp.SqliteRaw">
            <summary>
            Provides low-level access to SQLite. This is a wrapper over <see cref="T:SQLitePCL.raw"/>.
            </summary>
        </member>
        <member name="T:SQLiteSharp.Result">
            <summary>
            A simplified result code from a SQLite operation.
            </summary>
        </member>
        <member name="T:SQLiteSharp.ExtendedResult">
            <summary>
            A full result code from a SQLite operation.
            </summary>
        </member>
        <member name="T:SQLiteSharp.OpenFlags">
            <summary>
            Flags used when accessing a SQLite database, as defined in <see href="https://www.sqlite.org/c3ref/c_open_autoproxy.html">Flags For File Open Operations</see>.
            </summary>
        </member>
        <member name="T:SQLiteSharp.SqliteType">
            <summary>
            The storage class of a value that can be stored in a SQLite database.
            </summary>
        </member>
        <member name="T:SQLiteSharp.SqliteValue">
            <summary>
            A value that can be stored in a SQLite database.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteValue.Null">
            <summary>
            A null value of type <see cref="F:SQLiteSharp.SqliteType.Null"/>.
            </summary>
        </member>
        <member name="T:SQLiteSharp.SqliteTable`1">
            <summary>
            A single table in a <see cref="T:SQLiteSharp.SqliteConnection"/> mapped to a CLR object.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteTable`1.Connection">
            <summary>
            The database connection connected to the table.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteTable`1.Name">
            <summary>
            The name of the table.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteTable`1.VirtualModule">
            <summary>
            The virtual module name (e.g. "FTS5") to use when creating the table.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteTable`1.WithoutRowId">
            <summary>
            Whether the table should be created without an implicit <c>rowid</c>.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteTable`1.Columns">
            <summary>
            The columns of the table.
            </summary>
        </member>
        <member name="P:SQLiteSharp.SqliteTable`1.PrimaryKey">
            <summary>
            The column designated as the primary key of the table.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.DeleteTable">
            <summary>
            Executes "drop table if not exists" on the database.
            </summary>
            <remarks>
            This is non-recoverable.
            </remarks>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.DeleteTableAsync">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.DeleteTable"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.Build">
            <summary>
            Returns a <see cref="T:SQLiteSharp.SqlBuilder`1"/> to build and execute a complex SQL query using the fluent style.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.ExecuteQuery(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates and executes a <see cref="T:SQLiteSharp.SqliteCommand"/> query.<br/>
            Use this method to retrieve rows.
            </summary>
            <returns>
            The rows returned by the query.
            </returns>
            <remarks>
            The <see cref="T:SQLiteSharp.SqliteConnection"/> must remain open for the lifetime of the enumerator.
            </remarks>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.ExecuteQueryAsync(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.ExecuteQuery(System.String,System.Collections.Generic.IEnumerable{System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.ExecuteQuery(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.ExecuteQuery(System.String,System.Collections.Generic.IEnumerable{System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.ExecuteQueryAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.ExecuteQuery(System.String,System.Collections.Generic.IEnumerable{System.Object})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.FindAll">
            <summary>
            Retrieves every row in the table.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.FindAllAsync">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.FindAll"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.FindByKey(System.Object)">
            <summary>
            Retrieves an row with the primary key.<br/>
            The table must have a designated primary key.
            </summary>
            <returns>
            The row with the primary key, or <see langword="null"/> if the row is not found.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.FindByKeyAsync(System.Object)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.FindByKey(System.Object)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retrieves each row matching the predicate.
            </summary>
            <returns>
            The rows matching the predicate.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.FindOne(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.FindOne(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retrieves the first row matching the predicate.
            </summary>
            <returns>
            The first row matching the predicate, or <see langword="null"/> if no rows match the predicate.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.FindOneAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.FindOne(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Counts the number of rows matching the predicate.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.Insert(`0,System.String)">
            <summary>
            Inserts the row into the table, updating any auto-incremented primary keys.<br/>
            </summary>
            <param name="modifier">
            Literal SQL added after <c>INSERT</c>: <c>[OR REPLACE, OR IGNORE, OR ABORT, OR FAIL, OR ROLLBACK]</c>
            </param>
            <returns>The number of rows added.</returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.InsertAsync(`0,System.String)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.Insert(`0,System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.InsertAll(System.Collections.Generic.IEnumerable{`0},System.String)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.Insert(`0,System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.InsertAllAsync(System.Collections.Generic.IEnumerable{`0},System.String)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.InsertAll(System.Collections.Generic.IEnumerable{`0},System.String)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.InsertOrReplace(`0)">
            <summary>
            Inserts the row into the table, updating any auto-incremented primary keys.<br/>
            </summary>
            <remarks>
            If a UNIQUE constraint violation occurs, the old row is replaced.
            </remarks>
            <returns>The number of rows added/modified.</returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.InsertOrReplaceAsync(`0)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.InsertOrReplace(`0)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.InsertOrReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts each row into the table, updating any auto-incremented primary keys.<br/>
            </summary>
            <remarks>
            If a UNIQUE constraint violation occurs, the old row is replaced.
            </remarks>
            <returns>The number of rows added/modified.</returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.InsertOrReplaceAllAsync(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.InsertOrReplaceAll(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.InsertOrIgnore(`0)">
            <summary>
            Inserts the row into the table, updating any auto-incremented primary keys.<br/>
            </summary>
            <remarks>
            If a UNIQUE constraint violation occurs, the new row is not inserted.
            </remarks>
            <returns>The number of rows modified.</returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.InsertOrIgnoreAsync(`0)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.InsertOrIgnore(`0)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.InsertOrIgnoreAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts each row into the table, updating any auto-incremented primary keys.<br/>
            </summary>
            <remarks>
            If a UNIQUE constraint violation occurs, the new row is not inserted.
            </remarks>
            <returns>The number of rows added/modified.</returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.InsertOrIgnoreAllAsync(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.InsertOrIgnoreAll(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.Update(`0)">
            <summary>
            Updates every column of a table using the specified row except for its primary key.
            </summary>
            <remarks>
            The table must have a designated primary key.
            </remarks>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.UpdateAsync(`0)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.Update(`0)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.UpdateAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates every column of a table using the specified rows except for their primary key.
            </summary>
            <remarks>
            The table must have a designated primary key.
            </remarks>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.UpdateAllAsync(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.UpdateAll(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.DeleteAll">
            <summary>
            Deletes every object from the specified table.
            </summary>
            <remarks>
            This is non-recoverable.
            </remarks>
            <returns>
            The number of rows deleted.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.DeleteAllAsync">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.DeleteAll"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.DeleteByKey(System.Object)">
            <summary>
            Deletes the row with the specified primary key.
            </summary>
            <returns>
            The number of rows deleted.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.DeleteByKeyAsync(System.Object)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.DeleteByKey(System.Object)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.DeleteAllByKey(System.Collections.IEnumerable)">
            <summary>
            Deletes the rows with the specified primary key.
            </summary>
            <returns>
            The number of rows deleted.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.DeleteAllByKeyAsync(System.Collections.IEnumerable)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.DeleteAllByKey(System.Collections.IEnumerable)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes each row matching the predicate.
            </summary>
            <returns>
            The number of rows deleted.
            </returns>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.CreateIndex(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates an index for the specified column(s), facilitating constant lookup times.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.CreateIndexAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.CreateIndex(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.CreateIndex(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.CreateIndex(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.CreateIndexAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.CreateIndex(System.Collections.Generic.IEnumerable{System.String},System.Boolean)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.CreateIndex(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean)">
            <summary>
            Creates an index for the specified column(s), facilitating constant lookup times.<br/>
            For example:
            <code>
            CreateIndex&lt;Player&gt;(player => player.Name);
            </code>
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.CreateIndexAsync(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.CreateIndex(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.CreateIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.CreateIndex(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Object}}},System.Boolean)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.CreateIndexAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <inheritdoc cref="M:SQLiteSharp.SqliteTable`1.CreateIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)"/>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.MemberNameToColumnName(System.String)">
            <summary>
            Finds the name of the SQLite column mapped to the CLR member with the given name.
            </summary>
        </member>
        <member name="M:SQLiteSharp.SqliteTable`1.ColumnNameToMemberName(System.String)">
            <summary>
            Finds the name of the CLR member mapped to the SQLite column with the given name.
            </summary>
        </member>
        <member name="T:SQLiteSharp.TableInfo">
            <summary>
            Information about a single table, as returned by <see href="https://www.sqlite.org/pragma.html#pragma_table_list"><c>pragma table_list</c></see>.
            </summary>
        </member>
        <member name="P:SQLiteSharp.TableInfo.Schema">
            <summary>
            The schema in which the table appears (e.g. "main" or "temp").
            </summary>
        </member>
        <member name="P:SQLiteSharp.TableInfo.Name">
            <summary>
            The name of the table.
            </summary>
        </member>
        <member name="P:SQLiteSharp.TableInfo.Type">
            <summary>
            The type of object (e.g. "table", "view", "shadow" or "virtual").
            </summary>
        </member>
        <member name="P:SQLiteSharp.TableInfo.ColumnCount">
            <summary>
            The number of columns in the table, including generated and hidden columns.
            </summary>
        </member>
        <member name="P:SQLiteSharp.TableInfo.WithoutRowId">
            <summary>
            Whether the table was created without an implicit row ID (see <see href="https://sqlite.org/withoutrowid.html"/>).
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
